{"ast":null,"code":"var _jsxFileName = \"G:\\\\Coding\\\\KATOMARAN-HACKATHON\\\\my-app\\\\src\\\\components\\\\assets\\\\livestream\\\\livestream.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LiveStream = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [streaming, setStreaming] = useState(false);\n  useEffect(() => {\n    startCamera();\n    const interval = setInterval(() => {\n      if (streaming) {\n        captureAndSendFrame();\n      }\n    }, 1000); // Send frame every 1s\n\n    return () => {\n      stopCamera();\n      clearInterval(interval);\n    };\n  }, [streaming]);\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      videoRef.current.srcObject = stream;\n      setStreaming(true);\n    } catch (err) {\n      console.error(\"Camera error:\", err);\n    }\n  };\n  const stopCamera = () => {\n    if (videoRef.current && videoRef.current.srcObject) {\n      const tracks = videoRef.current.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n    }\n    setStreaming(false);\n  };\n  const captureAndSendFrame = async () => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    if (!video || !canvas) return;\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL(\"image/jpeg\");\n    try {\n      const res = await fetch(\"http://localhost:5000/recognize\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          image: dataURL\n        })\n      });\n      const data = await res.json();\n      drawBoxes(data.faces);\n    } catch (err) {\n      console.error(\"Recognition error:\", err);\n    }\n  };\n  const drawBoxes = faces => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    for (let face of faces) {\n      const {\n        left,\n        top,\n        right,\n        bottom,\n        name\n      } = face;\n      ctx.strokeStyle = \"green\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(left, top, right - left, bottom - top);\n      ctx.fillStyle = \"green\";\n      ctx.fillRect(left, top - 20, ctx.measureText(name).width + 10, 20);\n      ctx.fillStyle = \"white\";\n      ctx.font = \"16px Arial\";\n      ctx.fillText(name, left + 5, top - 5);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Live Face Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        width: \"640px\",\n        height: \"480px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        muted: true,\n        width: \"640\",\n        height: \"480\",\n        style: {\n          position: \"absolute\",\n          zIndex: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"640\",\n        height: \"480\",\n        style: {\n          position: \"absolute\",\n          zIndex: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveStream, \"iI6RUTkLe6DF5FBgxDiNy7o8HMo=\");\n_c = LiveStream;\nexport default LiveStream;\nvar _c;\n$RefreshReg$(_c, \"LiveStream\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","LiveStream","_s","videoRef","canvasRef","streaming","setStreaming","startCamera","interval","setInterval","captureAndSendFrame","stopCamera","clearInterval","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","err","console","error","tracks","getTracks","forEach","track","stop","canvas","context","getContext","drawImage","width","height","dataURL","toDataURL","res","fetch","method","headers","body","JSON","stringify","image","data","json","drawBoxes","faces","ctx","clearRect","face","left","top","right","bottom","name","strokeStyle","lineWidth","strokeRect","fillStyle","fillRect","measureText","font","fillText","children","fileName","_jsxFileName","lineNumber","columnNumber","style","position","ref","autoPlay","muted","zIndex","_c","$RefreshReg$"],"sources":["G:/Coding/KATOMARAN-HACKATHON/my-app/src/components/assets/livestream/livestream.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst LiveStream = () => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [streaming, setStreaming] = useState(false);\r\n\r\n  useEffect(() => {\r\n    startCamera();\r\n    const interval = setInterval(() => {\r\n      if (streaming) {\r\n        captureAndSendFrame();\r\n      }\r\n    }, 1000); // Send frame every 1s\r\n\r\n    return () => {\r\n      stopCamera();\r\n      clearInterval(interval);\r\n    };\r\n  }, [streaming]);\r\n\r\n  const startCamera = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n      videoRef.current.srcObject = stream;\r\n      setStreaming(true);\r\n    } catch (err) {\r\n      console.error(\"Camera error:\", err);\r\n    }\r\n  };\r\n\r\n  const stopCamera = () => {\r\n    if (videoRef.current && videoRef.current.srcObject) {\r\n      const tracks = videoRef.current.srcObject.getTracks();\r\n      tracks.forEach(track => track.stop());\r\n    }\r\n    setStreaming(false);\r\n  };\r\n\r\n  const captureAndSendFrame = async () => {\r\n    const video = videoRef.current;\r\n    const canvas = canvasRef.current;\r\n    if (!video || !canvas) return;\r\n\r\n    const context = canvas.getContext(\"2d\");\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    const dataURL = canvas.toDataURL(\"image/jpeg\");\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/recognize\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ image: dataURL }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      drawBoxes(data.faces);\r\n    } catch (err) {\r\n      console.error(\"Recognition error:\", err);\r\n    }\r\n  };\r\n\r\n  const drawBoxes = (faces) => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    for (let face of faces) {\r\n      const { left, top, right, bottom, name } = face;\r\n      ctx.strokeStyle = \"green\";\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeRect(left, top, right - left, bottom - top);\r\n\r\n      ctx.fillStyle = \"green\";\r\n      ctx.fillRect(left, top - 20, ctx.measureText(name).width + 10, 20);\r\n\r\n      ctx.fillStyle = \"white\";\r\n      ctx.font = \"16px Arial\";\r\n      ctx.fillText(name, left + 5, top - 5);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Live Face Recognition</h2>\r\n      <div style={{ position: \"relative\", width: \"640px\", height: \"480px\" }}>\r\n        <video\r\n          ref={videoRef}\r\n          autoPlay\r\n          muted\r\n          width=\"640\"\r\n          height=\"480\"\r\n          style={{ position: \"absolute\", zIndex: 1 }}\r\n        />\r\n        <canvas\r\n          ref={canvasRef}\r\n          width=\"640\"\r\n          height=\"480\"\r\n          style={{ position: \"absolute\", zIndex: 2 }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveStream;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}