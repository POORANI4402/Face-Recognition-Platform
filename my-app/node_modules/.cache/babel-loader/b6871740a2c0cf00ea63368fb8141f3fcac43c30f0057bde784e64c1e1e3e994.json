{"ast":null,"code":"var _jsxFileName = \"G:\\\\Coding\\\\KATOMARAN-HACKATHON\\\\my-app\\\\src\\\\components\\\\assets\\\\databasepage\\\\databasepage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DatabasePage() {\n  _s();\n  const [faces, setFaces] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/faces\").then(res => res.json()).then(data => {\n      setFaces(data);\n      setLoading(false);\n    }).catch(err => {\n      console.error(\"Failed to fetch faces\", err);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading database...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"database-container\",\n    style: {\n      padding: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Registered Faces Database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), faces.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No faces registered yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"face-gallery\",\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: '1rem'\n      },\n      children: faces.map(face => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"face-card\",\n        style: {\n          border: '1px solid #ccc',\n          padding: '0.5rem',\n          width: '150px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:5000/registered_faces/${face.filename}`,\n          alt: face.username,\n          style: {\n            width: '100%',\n            height: 'auto',\n            borderRadius: '4px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontWeight: 'bold',\n            margin: '0.5rem 0 0 0'\n          },\n          children: face.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '0.75rem',\n            color: '#555',\n            margin: '0'\n          },\n          children: new Date(face.timestamp).toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, face.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(DatabasePage, \"FV6Bkif9eYbrc3SeDUIrcADEWv4=\");\n_c = DatabasePage;\nexport default DatabasePage;\nvar _c;\n$RefreshReg$(_c, \"DatabasePage\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DatabasePage","_s","faces","setFaces","loading","setLoading","fetch","then","res","json","data","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","padding","length","display","flexWrap","gap","map","face","border","width","src","filename","alt","username","height","borderRadius","fontWeight","margin","fontSize","color","Date","timestamp","toLocaleString","id","_c","$RefreshReg$"],"sources":["G:/Coding/KATOMARAN-HACKATHON/my-app/src/components/assets/databasepage/databasepage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction DatabasePage() {\r\n  const [faces, setFaces] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:5000/faces\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setFaces(data);\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Failed to fetch faces\", err);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) return <p>Loading database...</p>;\r\n\r\n  return (\r\n    <div className=\"database-container\" style={{ padding: '1rem' }}>\r\n      <h3>Registered Faces Database</h3>\r\n      {faces.length === 0 ? (\r\n        <p>No faces registered yet.</p>\r\n      ) : (\r\n        <div className=\"face-gallery\" style={{ display: 'flex', flexWrap: 'wrap', gap: '1rem' }}>\r\n          {faces.map(face => (\r\n            <div key={face.id} className=\"face-card\" style={{ border: '1px solid #ccc', padding: '0.5rem', width: '150px' }}>\r\n              <img\r\n                src={`http://localhost:5000/registered_faces/${face.filename}`}\r\n                alt={face.username}\r\n                style={{ width: '100%', height: 'auto', borderRadius: '4px' }}\r\n              />\r\n              <p style={{ fontWeight: 'bold', margin: '0.5rem 0 0 0' }}>{face.username}</p>\r\n              <p style={{ fontSize: '0.75rem', color: '#555', margin: '0' }}>\r\n                {new Date(face.timestamp).toLocaleString()}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DatabasePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}