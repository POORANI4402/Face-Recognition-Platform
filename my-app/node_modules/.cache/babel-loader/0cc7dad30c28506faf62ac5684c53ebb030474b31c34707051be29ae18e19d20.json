{"ast":null,"code":"var _jsxFileName = \"G:\\\\Coding\\\\KATOMARAN-HACKATHON\\\\my-app\\\\src\\\\components\\\\assets\\\\livestream\\\\livestream.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n\n// const LiveStream = () => {\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [streaming, setStreaming] = useState(false);\n\n//   useEffect(() => {\n//     startCamera();\n//     const interval = setInterval(() => {\n//       if (streaming) {\n//         captureAndSendFrame();\n//       }\n//     }, 1000); // Send frame every 1s\n\n//     return () => {\n//       stopCamera();\n//       clearInterval(interval);\n//     };\n//   }, [streaming]);\n\n//   const startCamera = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//       videoRef.current.srcObject = stream;\n//       setStreaming(true);\n//     } catch (err) {\n//       console.error(\"Camera error:\", err);\n//     }\n//   };\n\n//   const stopCamera = () => {\n//     if (videoRef.current && videoRef.current.srcObject) {\n//       const tracks = videoRef.current.srcObject.getTracks();\n//       tracks.forEach(track => track.stop());\n//     }\n//     setStreaming(false);\n//   };\n\n//   const captureAndSendFrame = async () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext(\"2d\");\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataURL = canvas.toDataURL(\"image/jpeg\");\n\n//     try {\n//       const res = await fetch(\"http://localhost:5000/recognize\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ image: dataURL }),\n//       });\n\n//       const data = await res.json();\n//       drawBoxes(data.faces);\n//     } catch (err) {\n//       console.error(\"Recognition error:\", err);\n//     }\n//   };\n\n//   const drawBoxes = (faces) => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext(\"2d\");\n\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n//     for (let face of faces) {\n//       const { left, top, right, bottom, name } = face;\n//       ctx.strokeStyle = \"green\";\n//       ctx.lineWidth = 2;\n//       ctx.strokeRect(left, top, right - left, bottom - top);\n\n//       ctx.fillStyle = \"green\";\n//       ctx.fillRect(left, top - 20, ctx.measureText(name).width + 10, 20);\n\n//       ctx.fillStyle = \"white\";\n//       ctx.font = \"16px Arial\";\n//       ctx.fillText(name, left + 5, top - 5);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Live Face Recognition</h2>\n//       <div style={{ position: \"relative\", width: \"640px\", height: \"480px\" }}>\n//         <video\n//           ref={videoRef}\n//           autoPlay\n//           muted\n//           width=\"640\"\n//           height=\"480\"\n//           style={{ position: \"absolute\", zIndex: 1 }}\n//         />\n//         <canvas\n//           ref={canvasRef}\n//           width=\"640\"\n//           height=\"480\"\n//           style={{ position: \"absolute\", zIndex: 2 }}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LiveStream;\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LiveStream() {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [recognizedFaces, setRecognizedFaces] = useState([]);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    }).then(stream => {\n      videoRef.current.srcObject = stream;\n    });\n    const interval = setInterval(() => {\n      captureFrameAndRecognize();\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n  const drawBoxes = faces => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    const video = videoRef.current;\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.lineWidth = 2;\n    ctx.font = \"16px Arial\";\n    ctx.strokeStyle = \"lime\";\n    ctx.fillStyle = \"lime\";\n    faces.forEach(face => {\n      const {\n        left,\n        top,\n        right,\n        bottom,\n        name\n      } = face;\n      const width = right - left;\n      const height = bottom - top;\n      ctx.strokeRect(left, top, width, height);\n      ctx.fillText(name, left + 5, top - 5);\n    });\n  };\n  const captureFrameAndRecognize = () => {\n    const video = videoRef.current;\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = video.videoWidth || 640;\n    canvas.height = video.videoHeight || 480;\n    canvas.getContext(\"2d\").drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataUrl = canvas.toDataURL(\"image/jpeg\");\n    fetch(\"http://localhost:5000/recognize\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        image: dataUrl\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.faces) {\n        setRecognizedFaces(data.faces);\n        drawBoxes(data.faces);\n      }\n    }).catch(err => console.error(\"Recognition error\", err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83C\\uDFA5 Live Face Recognition with Flask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        display: \"inline-block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        muted: true,\n        playsInline: true,\n        width: \"640\",\n        height: \"480\",\n        style: {\n          border: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          pointerEvents: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recognized Faces:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), recognizedFaces.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD83D\\uDD0D Scanning...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this) : recognizedFaces.map((face, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83E\\uDDE0 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: face.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 18\n        }, this), \" at (\", face.left, \", \", face.top, \")\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveStream, \"78MCNs6oFwQ6y+nJkGMnXvVj2ag=\");\n_c = LiveStream;\nexport default LiveStream;\nvar _c;\n$RefreshReg$(_c, \"LiveStream\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","LiveStream","_s","videoRef","canvasRef","recognizedFaces","setRecognizedFaces","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","interval","setInterval","captureFrameAndRecognize","clearInterval","drawBoxes","faces","canvas","ctx","getContext","width","videoWidth","height","videoHeight","clearRect","lineWidth","font","strokeStyle","fillStyle","forEach","face","left","top","right","bottom","name","strokeRect","fillText","document","createElement","drawImage","dataUrl","toDataURL","fetch","method","headers","body","JSON","stringify","image","res","json","data","catch","err","console","error","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","position","display","ref","autoPlay","muted","playsInline","border","pointerEvents","marginTop","length","map","index","_c","$RefreshReg$"],"sources":["G:/Coding/KATOMARAN-HACKATHON/my-app/src/components/assets/livestream/livestream.jsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n// const LiveStream = () => {\r\n//   const videoRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n//   const [streaming, setStreaming] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     startCamera();\r\n//     const interval = setInterval(() => {\r\n//       if (streaming) {\r\n//         captureAndSendFrame();\r\n//       }\r\n//     }, 1000); // Send frame every 1s\r\n\r\n//     return () => {\r\n//       stopCamera();\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [streaming]);\r\n\r\n//   const startCamera = async () => {\r\n//     try {\r\n//       const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n//       videoRef.current.srcObject = stream;\r\n//       setStreaming(true);\r\n//     } catch (err) {\r\n//       console.error(\"Camera error:\", err);\r\n//     }\r\n//   };\r\n\r\n//   const stopCamera = () => {\r\n//     if (videoRef.current && videoRef.current.srcObject) {\r\n//       const tracks = videoRef.current.srcObject.getTracks();\r\n//       tracks.forEach(track => track.stop());\r\n//     }\r\n//     setStreaming(false);\r\n//   };\r\n\r\n//   const captureAndSendFrame = async () => {\r\n//     const video = videoRef.current;\r\n//     const canvas = canvasRef.current;\r\n//     if (!video || !canvas) return;\r\n\r\n//     const context = canvas.getContext(\"2d\");\r\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n//     const dataURL = canvas.toDataURL(\"image/jpeg\");\r\n\r\n//     try {\r\n//       const res = await fetch(\"http://localhost:5000/recognize\", {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify({ image: dataURL }),\r\n//       });\r\n\r\n//       const data = await res.json();\r\n//       drawBoxes(data.faces);\r\n//     } catch (err) {\r\n//       console.error(\"Recognition error:\", err);\r\n//     }\r\n//   };\r\n\r\n//   const drawBoxes = (faces) => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext(\"2d\");\r\n\r\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n//     for (let face of faces) {\r\n//       const { left, top, right, bottom, name } = face;\r\n//       ctx.strokeStyle = \"green\";\r\n//       ctx.lineWidth = 2;\r\n//       ctx.strokeRect(left, top, right - left, bottom - top);\r\n\r\n//       ctx.fillStyle = \"green\";\r\n//       ctx.fillRect(left, top - 20, ctx.measureText(name).width + 10, 20);\r\n\r\n//       ctx.fillStyle = \"white\";\r\n//       ctx.font = \"16px Arial\";\r\n//       ctx.fillText(name, left + 5, top - 5);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Live Face Recognition</h2>\r\n//       <div style={{ position: \"relative\", width: \"640px\", height: \"480px\" }}>\r\n//         <video\r\n//           ref={videoRef}\r\n//           autoPlay\r\n//           muted\r\n//           width=\"640\"\r\n//           height=\"480\"\r\n//           style={{ position: \"absolute\", zIndex: 1 }}\r\n//         />\r\n//         <canvas\r\n//           ref={canvasRef}\r\n//           width=\"640\"\r\n//           height=\"480\"\r\n//           style={{ position: \"absolute\", zIndex: 2 }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LiveStream;\r\n\r\n\r\n\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\n\r\nfunction LiveStream() {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [recognizedFaces, setRecognizedFaces] = useState([]);\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices.getUserMedia({ video: true }).then((stream) => {\r\n      videoRef.current.srcObject = stream;\r\n    });\r\n\r\n    const interval = setInterval(() => {\r\n      captureFrameAndRecognize();\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const drawBoxes = (faces) => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const video = videoRef.current;\r\n\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.lineWidth = 2;\r\n    ctx.font = \"16px Arial\";\r\n    ctx.strokeStyle = \"lime\";\r\n    ctx.fillStyle = \"lime\";\r\n\r\n    faces.forEach((face) => {\r\n      const { left, top, right, bottom, name } = face;\r\n      const width = right - left;\r\n      const height = bottom - top;\r\n      ctx.strokeRect(left, top, width, height);\r\n      ctx.fillText(name, left + 5, top - 5);\r\n    });\r\n  };\r\n\r\n  const captureFrameAndRecognize = () => {\r\n    const video = videoRef.current;\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = video.videoWidth || 640;\r\n    canvas.height = video.videoHeight || 480;\r\n    canvas.getContext(\"2d\").drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    const dataUrl = canvas.toDataURL(\"image/jpeg\");\r\n\r\n    fetch(\"http://localhost:5000/recognize\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ image: dataUrl })\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        if (data.faces) {\r\n          setRecognizedFaces(data.faces);\r\n          drawBoxes(data.faces);\r\n        }\r\n      })\r\n      .catch((err) => console.error(\"Recognition error\", err));\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <h2>🎥 Live Face Recognition with Flask</h2>\r\n      <div style={{ position: \"relative\", display: \"inline-block\" }}>\r\n        <video\r\n          ref={videoRef}\r\n          autoPlay\r\n          muted\r\n          playsInline\r\n          width=\"640\"\r\n          height=\"480\"\r\n          style={{ border: \"1px solid black\" }}\r\n        />\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            pointerEvents: \"none\"\r\n          }}\r\n        />\r\n      </div>\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <h3>Recognized Faces:</h3>\r\n        {recognizedFaces.length === 0 ? (\r\n          <p>🔍 Scanning...</p>\r\n        ) : (\r\n          recognizedFaces.map((face, index) => (\r\n            <p key={index}>\r\n              🧠 <strong>{face.name}</strong> at ({face.left}, {face.top})\r\n            </p>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiveStream;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}