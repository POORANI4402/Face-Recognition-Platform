{"ast":null,"code":"var _jsxFileName = \"G:\\\\Coding\\\\KATOMARAN-HACKATHON\\\\my-app\\\\src\\\\components\\\\assets\\\\livestream\\\\livestream.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n\n// const LiveStream = () => {\n//   const videoRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const [streaming, setStreaming] = useState(false);\n\n//   useEffect(() => {\n//     startCamera();\n//     const interval = setInterval(() => {\n//       if (streaming) {\n//         captureAndSendFrame();\n//       }\n//     }, 1000); // Send frame every 1s\n\n//     return () => {\n//       stopCamera();\n//       clearInterval(interval);\n//     };\n//   }, [streaming]);\n\n//   const startCamera = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//       videoRef.current.srcObject = stream;\n//       setStreaming(true);\n//     } catch (err) {\n//       console.error(\"Camera error:\", err);\n//     }\n//   };\n\n//   const stopCamera = () => {\n//     if (videoRef.current && videoRef.current.srcObject) {\n//       const tracks = videoRef.current.srcObject.getTracks();\n//       tracks.forEach(track => track.stop());\n//     }\n//     setStreaming(false);\n//   };\n\n//   const captureAndSendFrame = async () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext(\"2d\");\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataURL = canvas.toDataURL(\"image/jpeg\");\n\n//     try {\n//       const res = await fetch(\"http://localhost:5000/recognize\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ image: dataURL }),\n//       });\n\n//       const data = await res.json();\n//       drawBoxes(data.faces);\n//     } catch (err) {\n//       console.error(\"Recognition error:\", err);\n//     }\n//   };\n\n//   const drawBoxes = (faces) => {\n//     const canvas = canvasRef.current;\n//     const ctx = canvas.getContext(\"2d\");\n\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n//     for (let face of faces) {\n//       const { left, top, right, bottom, name } = face;\n//       ctx.strokeStyle = \"green\";\n//       ctx.lineWidth = 2;\n//       ctx.strokeRect(left, top, right - left, bottom - top);\n\n//       ctx.fillStyle = \"green\";\n//       ctx.fillRect(left, top - 20, ctx.measureText(name).width + 10, 20);\n\n//       ctx.fillStyle = \"white\";\n//       ctx.font = \"16px Arial\";\n//       ctx.fillText(name, left + 5, top - 5);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Live Face Recognition</h2>\n//       <div style={{ position: \"relative\", width: \"640px\", height: \"480px\" }}>\n//         <video\n//           ref={videoRef}\n//           autoPlay\n//           muted\n//           width=\"640\"\n//           height=\"480\"\n//           style={{ position: \"absolute\", zIndex: 1 }}\n//         />\n//         <canvas\n//           ref={canvasRef}\n//           width=\"640\"\n//           height=\"480\"\n//           style={{ position: \"absolute\", zIndex: 2 }}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default LiveStream;\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LiveStream() {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [faceMemory, setFaceMemory] = useState({});\n  const canvasWidth = 640;\n  const canvasHeight = 480;\n  useEffect(() => {\n    let intervalId;\n    async function startCamera() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        videoRef.current.srcObject = stream;\n        await videoRef.current.play();\n        intervalId = setInterval(async () => {\n          if (!videoRef.current || !canvasRef.current) return;\n          const video = videoRef.current;\n          const canvas = canvasRef.current;\n          const ctx = canvas.getContext(\"2d\");\n\n          // Draw current frame on canvas\n          ctx.drawImage(video, 0, 0, canvasWidth, canvasHeight);\n\n          // Get base64 image from canvas\n          const dataUrl = canvas.toDataURL(\"image/jpeg\");\n          try {\n            const response = await fetch(\"http://localhost:5000/recognize\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                image: dataUrl\n              })\n            });\n            const result = await response.json();\n\n            // Clear and redraw frame\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            ctx.drawImage(video, 0, 0, canvasWidth, canvasHeight);\n\n            // Update faceMemory with new detections (for stable boxes)\n            let newFaceMemory = {\n              ...faceMemory\n            };\n            result.faces.forEach(({\n              top,\n              right,\n              bottom,\n              left,\n              name\n            }) => {\n              const key = `${left}_${top}_${right}_${bottom}`;\n              newFaceMemory[key] = {\n                name,\n                coords: {\n                  top,\n                  right,\n                  bottom,\n                  left\n                },\n                timestamp: Date.now()\n              };\n            });\n\n            // Remove stale faces older than 2 seconds\n            const now = Date.now();\n            Object.keys(newFaceMemory).forEach(key => {\n              if (now - newFaceMemory[key].timestamp > 2000) {\n                delete newFaceMemory[key];\n              }\n            });\n            setFaceMemory(newFaceMemory);\n\n            // Draw bounding boxes and names\n            Object.values(newFaceMemory).forEach(({\n              name,\n              coords\n            }) => {\n              const {\n                top,\n                right,\n                bottom,\n                left\n              } = coords;\n              ctx.strokeStyle = \"#00FF00\";\n              ctx.lineWidth = 2;\n              ctx.strokeRect(left, top, right - left, bottom - top);\n              ctx.fillStyle = \"#00FF00\";\n              ctx.font = \"18px Arial\";\n              ctx.fillText(name, left, top > 20 ? top - 8 : bottom + 20);\n            });\n          } catch (error) {\n            console.error(\"Error recognizing faces:\", error);\n          }\n        }, 800); // send every 800ms\n      } catch (err) {\n        console.error(\"Camera error:\", err);\n      }\n    }\n    startCamera();\n    return () => {\n      clearInterval(intervalId);\n      if (videoRef.current && videoRef.current.srcObject) {\n        videoRef.current.srcObject.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [faceMemory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: canvasWidth,\n      height: canvasHeight\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      muted: true,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        zIndex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        zIndex: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveStream, \"AHMwlctnoVoYZFp4HIBfOYuI4uI=\");\n_c = LiveStream;\nexport default LiveStream;\nvar _c;\n$RefreshReg$(_c, \"LiveStream\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","LiveStream","_s","videoRef","canvasRef","faceMemory","setFaceMemory","canvasWidth","canvasHeight","intervalId","startCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","play","setInterval","canvas","ctx","getContext","drawImage","dataUrl","toDataURL","response","fetch","method","headers","body","JSON","stringify","image","result","json","clearRect","newFaceMemory","faces","forEach","top","right","bottom","left","name","key","coords","timestamp","Date","now","Object","keys","values","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","error","console","err","clearInterval","getTracks","track","stop","style","position","width","height","children","ref","muted","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["G:/Coding/KATOMARAN-HACKATHON/my-app/src/components/assets/livestream/livestream.jsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n// const LiveStream = () => {\r\n//   const videoRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n//   const [streaming, setStreaming] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     startCamera();\r\n//     const interval = setInterval(() => {\r\n//       if (streaming) {\r\n//         captureAndSendFrame();\r\n//       }\r\n//     }, 1000); // Send frame every 1s\r\n\r\n//     return () => {\r\n//       stopCamera();\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [streaming]);\r\n\r\n//   const startCamera = async () => {\r\n//     try {\r\n//       const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n//       videoRef.current.srcObject = stream;\r\n//       setStreaming(true);\r\n//     } catch (err) {\r\n//       console.error(\"Camera error:\", err);\r\n//     }\r\n//   };\r\n\r\n//   const stopCamera = () => {\r\n//     if (videoRef.current && videoRef.current.srcObject) {\r\n//       const tracks = videoRef.current.srcObject.getTracks();\r\n//       tracks.forEach(track => track.stop());\r\n//     }\r\n//     setStreaming(false);\r\n//   };\r\n\r\n//   const captureAndSendFrame = async () => {\r\n//     const video = videoRef.current;\r\n//     const canvas = canvasRef.current;\r\n//     if (!video || !canvas) return;\r\n\r\n//     const context = canvas.getContext(\"2d\");\r\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n//     const dataURL = canvas.toDataURL(\"image/jpeg\");\r\n\r\n//     try {\r\n//       const res = await fetch(\"http://localhost:5000/recognize\", {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify({ image: dataURL }),\r\n//       });\r\n\r\n//       const data = await res.json();\r\n//       drawBoxes(data.faces);\r\n//     } catch (err) {\r\n//       console.error(\"Recognition error:\", err);\r\n//     }\r\n//   };\r\n\r\n//   const drawBoxes = (faces) => {\r\n//     const canvas = canvasRef.current;\r\n//     const ctx = canvas.getContext(\"2d\");\r\n\r\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n//     for (let face of faces) {\r\n//       const { left, top, right, bottom, name } = face;\r\n//       ctx.strokeStyle = \"green\";\r\n//       ctx.lineWidth = 2;\r\n//       ctx.strokeRect(left, top, right - left, bottom - top);\r\n\r\n//       ctx.fillStyle = \"green\";\r\n//       ctx.fillRect(left, top - 20, ctx.measureText(name).width + 10, 20);\r\n\r\n//       ctx.fillStyle = \"white\";\r\n//       ctx.font = \"16px Arial\";\r\n//       ctx.fillText(name, left + 5, top - 5);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Live Face Recognition</h2>\r\n//       <div style={{ position: \"relative\", width: \"640px\", height: \"480px\" }}>\r\n//         <video\r\n//           ref={videoRef}\r\n//           autoPlay\r\n//           muted\r\n//           width=\"640\"\r\n//           height=\"480\"\r\n//           style={{ position: \"absolute\", zIndex: 1 }}\r\n//         />\r\n//         <canvas\r\n//           ref={canvasRef}\r\n//           width=\"640\"\r\n//           height=\"480\"\r\n//           style={{ position: \"absolute\", zIndex: 2 }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LiveStream;\r\n\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\n\r\nfunction LiveStream() {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [faceMemory, setFaceMemory] = useState({});\r\n\r\n  const canvasWidth = 640;\r\n  const canvasHeight = 480;\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n\r\n    async function startCamera() {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        videoRef.current.srcObject = stream;\r\n        await videoRef.current.play();\r\n\r\n        intervalId = setInterval(async () => {\r\n          if (!videoRef.current || !canvasRef.current) return;\r\n\r\n          const video = videoRef.current;\r\n          const canvas = canvasRef.current;\r\n          const ctx = canvas.getContext(\"2d\");\r\n\r\n          // Draw current frame on canvas\r\n          ctx.drawImage(video, 0, 0, canvasWidth, canvasHeight);\r\n\r\n          // Get base64 image from canvas\r\n          const dataUrl = canvas.toDataURL(\"image/jpeg\");\r\n\r\n          try {\r\n            const response = await fetch(\"http://localhost:5000/recognize\", {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({ image: dataUrl }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            // Clear and redraw frame\r\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n            ctx.drawImage(video, 0, 0, canvasWidth, canvasHeight);\r\n\r\n            // Update faceMemory with new detections (for stable boxes)\r\n            let newFaceMemory = {...faceMemory};\r\n\r\n            result.faces.forEach(({ top, right, bottom, left, name }) => {\r\n              const key = `${left}_${top}_${right}_${bottom}`;\r\n              newFaceMemory[key] = { name, coords: { top, right, bottom, left }, timestamp: Date.now() };\r\n            });\r\n\r\n            // Remove stale faces older than 2 seconds\r\n            const now = Date.now();\r\n            Object.keys(newFaceMemory).forEach((key) => {\r\n              if (now - newFaceMemory[key].timestamp > 2000) {\r\n                delete newFaceMemory[key];\r\n              }\r\n            });\r\n\r\n            setFaceMemory(newFaceMemory);\r\n\r\n            // Draw bounding boxes and names\r\n            Object.values(newFaceMemory).forEach(({ name, coords }) => {\r\n              const { top, right, bottom, left } = coords;\r\n              ctx.strokeStyle = \"#00FF00\";\r\n              ctx.lineWidth = 2;\r\n              ctx.strokeRect(left, top, right - left, bottom - top);\r\n\r\n              ctx.fillStyle = \"#00FF00\";\r\n              ctx.font = \"18px Arial\";\r\n              ctx.fillText(name, left, top > 20 ? top - 8 : bottom + 20);\r\n            });\r\n          } catch (error) {\r\n            console.error(\"Error recognizing faces:\", error);\r\n          }\r\n        }, 800); // send every 800ms\r\n\r\n      } catch (err) {\r\n        console.error(\"Camera error:\", err);\r\n      }\r\n    }\r\n\r\n    startCamera();\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      if (videoRef.current && videoRef.current.srcObject) {\r\n        videoRef.current.srcObject.getTracks().forEach(track => track.stop());\r\n      }\r\n    };\r\n  }, [faceMemory]);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width: canvasWidth, height: canvasHeight }}>\r\n      <video\r\n        ref={videoRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        muted\r\n        style={{ position: \"absolute\", top: 0, left: 0, zIndex: 1 }}\r\n      />\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        style={{ position: \"absolute\", top: 0, left: 0, zIndex: 2 }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiveStream;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMQ,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhD,MAAMS,WAAW,GAAG,GAAG;EACvB,MAAMC,YAAY,GAAG,GAAG;EAExBX,SAAS,CAAC,MAAM;IACd,IAAIY,UAAU;IAEd,eAAeC,WAAWA,CAAA,EAAG;MAC3B,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QACzEZ,QAAQ,CAACa,OAAO,CAACC,SAAS,GAAGN,MAAM;QACnC,MAAMR,QAAQ,CAACa,OAAO,CAACE,IAAI,CAAC,CAAC;QAE7BT,UAAU,GAAGU,WAAW,CAAC,YAAY;UACnC,IAAI,CAAChB,QAAQ,CAACa,OAAO,IAAI,CAACZ,SAAS,CAACY,OAAO,EAAE;UAE7C,MAAMD,KAAK,GAAGZ,QAAQ,CAACa,OAAO;UAC9B,MAAMI,MAAM,GAAGhB,SAAS,CAACY,OAAO;UAChC,MAAMK,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;UAEnC;UACAD,GAAG,CAACE,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAER,WAAW,EAAEC,YAAY,CAAC;;UAErD;UACA,MAAMgB,OAAO,GAAGJ,MAAM,CAACK,SAAS,CAAC,YAAY,CAAC;UAE9C,IAAI;YACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;cAC9DC,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBAAE,cAAc,EAAE;cAAmB,CAAC;cAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBAAEC,KAAK,EAAET;cAAQ,CAAC;YACzC,CAAC,CAAC;YAEF,MAAMU,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;;YAEpC;YACAd,GAAG,CAACe,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE7B,WAAW,EAAEC,YAAY,CAAC;YAC9Ca,GAAG,CAACE,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAER,WAAW,EAAEC,YAAY,CAAC;;YAErD;YACA,IAAI6B,aAAa,GAAG;cAAC,GAAGhC;YAAU,CAAC;YAEnC6B,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC;cAAEC,GAAG;cAAEC,KAAK;cAAEC,MAAM;cAAEC,IAAI;cAAEC;YAAK,CAAC,KAAK;cAC3D,MAAMC,GAAG,GAAG,GAAGF,IAAI,IAAIH,GAAG,IAAIC,KAAK,IAAIC,MAAM,EAAE;cAC/CL,aAAa,CAACQ,GAAG,CAAC,GAAG;gBAAED,IAAI;gBAAEE,MAAM,EAAE;kBAAEN,GAAG;kBAAEC,KAAK;kBAAEC,MAAM;kBAAEC;gBAAK,CAAC;gBAAEI,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;cAAE,CAAC;YAC5F,CAAC,CAAC;;YAEF;YACA,MAAMA,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;YACtBC,MAAM,CAACC,IAAI,CAACd,aAAa,CAAC,CAACE,OAAO,CAAEM,GAAG,IAAK;cAC1C,IAAII,GAAG,GAAGZ,aAAa,CAACQ,GAAG,CAAC,CAACE,SAAS,GAAG,IAAI,EAAE;gBAC7C,OAAOV,aAAa,CAACQ,GAAG,CAAC;cAC3B;YACF,CAAC,CAAC;YAEFvC,aAAa,CAAC+B,aAAa,CAAC;;YAE5B;YACAa,MAAM,CAACE,MAAM,CAACf,aAAa,CAAC,CAACE,OAAO,CAAC,CAAC;cAAEK,IAAI;cAAEE;YAAO,CAAC,KAAK;cACzD,MAAM;gBAAEN,GAAG;gBAAEC,KAAK;gBAAEC,MAAM;gBAAEC;cAAK,CAAC,GAAGG,MAAM;cAC3CzB,GAAG,CAACgC,WAAW,GAAG,SAAS;cAC3BhC,GAAG,CAACiC,SAAS,GAAG,CAAC;cACjBjC,GAAG,CAACkC,UAAU,CAACZ,IAAI,EAAEH,GAAG,EAAEC,KAAK,GAAGE,IAAI,EAAED,MAAM,GAAGF,GAAG,CAAC;cAErDnB,GAAG,CAACmC,SAAS,GAAG,SAAS;cACzBnC,GAAG,CAACoC,IAAI,GAAG,YAAY;cACvBpC,GAAG,CAACqC,QAAQ,CAACd,IAAI,EAAED,IAAI,EAAEH,GAAG,GAAG,EAAE,GAAGA,GAAG,GAAG,CAAC,GAAGE,MAAM,GAAG,EAAE,CAAC;YAC5D,CAAC,CAAC;UACJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAClD;QACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MAEX,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZD,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEE,GAAG,CAAC;MACrC;IACF;IAEAnD,WAAW,CAAC,CAAC;IAEb,OAAO,MAAM;MACXoD,aAAa,CAACrD,UAAU,CAAC;MACzB,IAAIN,QAAQ,CAACa,OAAO,IAAIb,QAAQ,CAACa,OAAO,CAACC,SAAS,EAAE;QAClDd,QAAQ,CAACa,OAAO,CAACC,SAAS,CAAC8C,SAAS,CAAC,CAAC,CAACxB,OAAO,CAACyB,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACvE;IACF,CAAC;EACH,CAAC,EAAE,CAAC5D,UAAU,CAAC,CAAC;EAEhB,oBACEL,OAAA;IAAKkE,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,KAAK,EAAE7D,WAAW;MAAE8D,MAAM,EAAE7D;IAAa,CAAE;IAAA8D,QAAA,gBAC7EtE,OAAA;MACEuE,GAAG,EAAEpE,QAAS;MACdiE,KAAK,EAAE7D,WAAY;MACnB8D,MAAM,EAAE7D,YAAa;MACrBgE,KAAK;MACLN,KAAK,EAAE;QAAEC,QAAQ,EAAE,UAAU;QAAE3B,GAAG,EAAE,CAAC;QAAEG,IAAI,EAAE,CAAC;QAAE8B,MAAM,EAAE;MAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC,eACF7E,OAAA;MACEuE,GAAG,EAAEnE,SAAU;MACfgE,KAAK,EAAE7D,WAAY;MACnB8D,MAAM,EAAE7D,YAAa;MACrB0D,KAAK,EAAE;QAAEC,QAAQ,EAAE,UAAU;QAAE3B,GAAG,EAAE,CAAC;QAAEG,IAAI,EAAE,CAAC;QAAE8B,MAAM,EAAE;MAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC3E,EAAA,CA7GQD,UAAU;AAAA6E,EAAA,GAAV7E,UAAU;AA+GnB,eAAeA,UAAU;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}