{"ast":null,"code":"var _jsxFileName = \"G:\\\\Coding\\\\KATOMARAN-HACKATHON\\\\my-app\\\\src\\\\components\\\\assets\\\\livestream\\\\livestream.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LiveStream() {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [faceCache, setFaceCache] = useState({});\n  const canvasWidth = 640;\n  const canvasHeight = 480;\n  useEffect(() => {\n    let intervalId;\n    let faceMemory = {};\n    async function startCamera() {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n        intervalId = setInterval(async () => {\n          if (!videoRef.current || !canvasRef.current) return;\n          const video = videoRef.current;\n          const canvas = canvasRef.current;\n          const ctx = canvas.getContext(\"2d\");\n\n          // Draw current video frame on canvas\n          ctx.drawImage(video, 0, 0, canvasWidth, canvasHeight);\n          const dataUrl = canvas.toDataURL(\"image/jpeg\");\n          try {\n            const response = await fetch(\"http://localhost:5000/recognize\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                image: dataUrl\n              })\n            });\n            const result = await response.json();\n\n            // Clear canvas and redraw current frame\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            ctx.drawImage(video, 0, 0, canvasWidth, canvasHeight);\n\n            // Update faceMemory with new detections\n            result.faces.forEach(({\n              top,\n              right,\n              bottom,\n              left,\n              name\n            }) => {\n              const faceKey = `${left}_${top}_${right}_${bottom}`;\n              faceMemory[faceKey] = {\n                name,\n                coords: {\n                  top,\n                  right,\n                  bottom,\n                  left\n                },\n                timestamp: Date.now()\n              };\n            });\n\n            // Remove old faces (stale for over 2 seconds)\n            const now = Date.now();\n            Object.keys(faceMemory).forEach(key => {\n              if (now - faceMemory[key].timestamp > 2000) {\n                delete faceMemory[key];\n              }\n            });\n\n            // Draw from memory\n            Object.values(faceMemory).forEach(({\n              name,\n              coords\n            }) => {\n              const {\n                top,\n                right,\n                bottom,\n                left\n              } = coords;\n              ctx.strokeStyle = \"#00FF00\";\n              ctx.lineWidth = 2;\n              ctx.strokeRect(left, top, right - left, bottom - top);\n              ctx.fillStyle = \"#00FF00\";\n              ctx.font = \"18px Arial\";\n              ctx.fillText(name, left, top > 20 ? top - 8 : bottom + 20);\n            });\n          } catch (err) {\n            console.error(\"Recognition error:\", err);\n          }\n        }, 800); // Run every 800ms\n      } catch (err) {\n        console.error(\"Camera error:\", err);\n      }\n    }\n    startCamera();\n    return () => {\n      clearInterval(intervalId);\n      if (videoRef.current && videoRef.current.srcObject) {\n        videoRef.current.srcObject.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: canvasWidth,\n      height: canvasHeight\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      autoPlay: true,\n      muted: true,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        zIndex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: canvasWidth,\n      height: canvasHeight,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        zIndex: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveStream, \"KsqWYBTkIw6dkgxCkJDhrTLMXcE=\");\n_c = LiveStream;\nexport default LiveStream;\nvar _c;\n$RefreshReg$(_c, \"LiveStream\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","LiveStream","_s","videoRef","canvasRef","faceCache","setFaceCache","canvasWidth","canvasHeight","intervalId","faceMemory","startCamera","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","play","setInterval","canvas","ctx","getContext","drawImage","dataUrl","toDataURL","response","fetch","method","headers","body","JSON","stringify","image","result","json","clearRect","faces","forEach","top","right","bottom","left","name","faceKey","coords","timestamp","Date","now","Object","keys","key","values","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","err","console","error","clearInterval","getTracks","track","stop","style","position","width","height","children","ref","autoPlay","muted","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["G:/Coding/KATOMARAN-HACKATHON/my-app/src/components/assets/livestream/livestream.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nfunction LiveStream() {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [faceCache, setFaceCache] = useState({});\r\n  const canvasWidth = 640;\r\n  const canvasHeight = 480;\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n    let faceMemory = {};\r\n\r\n    async function startCamera() {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        videoRef.current.srcObject = stream;\r\n        videoRef.current.play();\r\n\r\n        intervalId = setInterval(async () => {\r\n          if (!videoRef.current || !canvasRef.current) return;\r\n\r\n          const video = videoRef.current;\r\n          const canvas = canvasRef.current;\r\n          const ctx = canvas.getContext(\"2d\");\r\n\r\n          // Draw current video frame on canvas\r\n          ctx.drawImage(video, 0, 0, canvasWidth, canvasHeight);\r\n\r\n          const dataUrl = canvas.toDataURL(\"image/jpeg\");\r\n\r\n          try {\r\n            const response = await fetch(\"http://localhost:5000/recognize\", {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({ image: dataUrl }),\r\n            });\r\n\r\n            const result = await response.json();\r\n\r\n            // Clear canvas and redraw current frame\r\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n            ctx.drawImage(video, 0, 0, canvasWidth, canvasHeight);\r\n\r\n            // Update faceMemory with new detections\r\n            result.faces.forEach(({ top, right, bottom, left, name }) => {\r\n              const faceKey = `${left}_${top}_${right}_${bottom}`;\r\n\r\n              faceMemory[faceKey] = {\r\n                name,\r\n                coords: { top, right, bottom, left },\r\n                timestamp: Date.now()\r\n              };\r\n            });\r\n\r\n            // Remove old faces (stale for over 2 seconds)\r\n            const now = Date.now();\r\n            Object.keys(faceMemory).forEach((key) => {\r\n              if (now - faceMemory[key].timestamp > 2000) {\r\n                delete faceMemory[key];\r\n              }\r\n            });\r\n\r\n            // Draw from memory\r\n            Object.values(faceMemory).forEach(({ name, coords }) => {\r\n              const { top, right, bottom, left } = coords;\r\n\r\n              ctx.strokeStyle = \"#00FF00\";\r\n              ctx.lineWidth = 2;\r\n              ctx.strokeRect(left, top, right - left, bottom - top);\r\n\r\n              ctx.fillStyle = \"#00FF00\";\r\n              ctx.font = \"18px Arial\";\r\n              ctx.fillText(name, left, top > 20 ? top - 8 : bottom + 20);\r\n            });\r\n\r\n          } catch (err) {\r\n            console.error(\"Recognition error:\", err);\r\n          }\r\n        }, 800); // Run every 800ms\r\n\r\n      } catch (err) {\r\n        console.error(\"Camera error:\", err);\r\n      }\r\n    }\r\n\r\n    startCamera();\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      if (videoRef.current && videoRef.current.srcObject) {\r\n        videoRef.current.srcObject.getTracks().forEach((track) => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width: canvasWidth, height: canvasHeight }}>\r\n      <video\r\n        ref={videoRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        autoPlay\r\n        muted\r\n        style={{ position: \"absolute\", top: 0, left: 0, zIndex: 1 }}\r\n      />\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        style={{ position: \"absolute\", top: 0, left: 0, zIndex: 2 }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiveStream;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}